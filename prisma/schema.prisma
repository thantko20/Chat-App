// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName String
  handleName String @unique
  email String @unique
  password String
  salt String
  emailVerified Boolean
  profileImage String?
  fromUsers UserContact[] @relation(name: "fromUser")
  toUsers UserContact[] @relation(name: "toUser")
  messages Message[]
  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserContact {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId String
  toUserId String
  fromUser User @relation(name: "fromUser", fields: [fromUserId], references: [id])
  toUser User @relation(name: "toUser", fields: [toUserId], references: [id])
	@@map("ContactUser")
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  lastMessageId String? @db.ObjectId @unique
  lastMessage Message? @relation(name: "LastMessage", fields: [lastMessageId], references: [id])
  messages Message[] @relation("Messages")
  participantIds String[] @db.ObjectId @unique
  acknowledgeParticipantIds String[]
  participants User[] @relation(fields: [participantIds], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id])
  conversationId String @db.ObjectId
  conversation Conversation @relation(name: "Messages", fields: [conversationId], references: [id], onUpdate: NoAction)
  conversationLastMessage Conversation? @relation("LastMessage")
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FriendShipStatus {
  REQUEST_PENDING
  FRIENDS
  HAS_BLOCKED
  IS_BLOCKED
}

