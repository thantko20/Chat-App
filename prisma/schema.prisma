// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = "referentialIntegrity"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName String
  handleName String @unique
  email String @unique
  password String
  salt String
  emailVerified Boolean
  profileImage String?
  friendshipFriendOf Friendship[] @relation("FriendOf")
  friendshipFriendTo Friendship[] @relation("FriendTo")
  userOneConversation Conversation[] @relation("UserOne")
  userTwoConversation Conversation[] @relation("UserTwo")
  messages Message[] 
  createdAt DateTime @default(now())
}

model Friendship {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  status FriendShipStatus @default(REQUEST_PENDING)
  friendOfId String @db.ObjectId
  friendToId String @db.ObjectId
  friendOf User @relation(name: "FriendOf", fields: [friendOfId], references: [id])
  friendTo User @relation(name: "FriendTo", fields: [friendToId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userOneId String @db.ObjectId
  userTwoId String @db.ObjectId
  lastMessageId String? @db.ObjectId @unique
  userOne User @relation(name: "UserOne", fields: [userOneId], references: [id])
  userTwo User @relation(name: "UserTwo", fields: [userTwoId], references: [id])
  lastMessage Message? @relation(name: "LastMessage", fields: [lastMessageId], references: [id])
  messages Message[] @relation("Messages")
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id])
  conversationId String @db.ObjectId
  conversation Conversation @relation(name: "Messages", fields: [conversationId], references: [id], onUpdate: NoAction)
  conversationLastMessage Conversation? @relation("LastMessage")
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum FriendShipStatus {
  REQUEST_PENDING
  FRIENDS
  HAS_BLOCKED
  IS_BLOCKED
}

